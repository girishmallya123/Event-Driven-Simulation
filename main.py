import logging
from config_reader import Config
import pareto_sampler
from exceptions import InvalidParameterException
import sys
import numpy as np
import poisson_process
from file import File
from event import Event

def run_simulation(cache_policies, iterations):
    pass

def main():
    logging.basicConfig(filename='event.log', level=logging.INFO)
    logging.info("main#Starting the simulator")
    params = Config()
    try:
        file_sizes = pareto_sampler.generate_pareto_samples(params, mode="size")
        file_q = pareto_sampler.generate_pareto_samples(params, mode="popularity")
        file_pop = file_q / sum(file_q)
    except InvalidParameterException:
        logging.error("main# Exitting because the parameters are invalid to generate a pareto distribution of file sizes")
        sys.exit(0)

    '''
        the number of events in this case, files requested are generated using
        the Poisson Process.
    '''
    poisson_lambda = params.poisson_lambda
    number_of_reqs = params.number_of_requests

    event_counter = poisson_process.poisson_process(poisson_lambda, number_of_reqs)

    '''
        create instances of events for each time generated by the Poisson Distribution. We randomly select a file
        that would be requested, this is done by taking the file popularities into account. 
    '''

    request_events = []

    logging.info("main# Randomly generating {} file request events".format(number_of_reqs))
    for event in event_counter:
        _file_arrival_time = event
        random_file_ix = np.random.choice(params.N, size=1, replace=True, p= file_pop)
        _file = File(random_file_ix, file_sizes[random_file_ix], _file_arrival_time)
        _event = Event(_file)
        request_events.append(_event)

    cache_policies = ['LRU', 'FIFO']
    results = run_simulation(cache_policies, params.iterations)

if __name__ == "__main__":
    main()
